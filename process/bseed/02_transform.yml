# Annual Inspections
- type: sql
  statements:
      - drop table if exists bseed.annual_inspections
      - create table bseed.annual_inspections as (
            select
            i.action_date, 
            i.action_description,
            i.csa_disp as result,
            i.csm_caseno as case_number,
            pn.cleaned as parcel_assess,
            concat_ws(' ', cm.csm_name_first, cm.csm_name_last) as owner,
            cm.csm_projname as project_name,
            concat_ws(' ', i.csm_st_nmbr, i.csm_st_pfx, i.csm_st_name) as address
            from bseed.tm_inspections i
            inner join bseed.tm_casemain cm on i.csm_caseno = cm.csm_caseno
            inner join bseed.pnum_lookup pn on cm.prc_parcel_no = pn.dirty)
- type: geocode
  table: bseed.annual_inspections
  add_col: address
  geom_col: geom
- type: sql
  statements:
      - create view bseed.annual_inspections_socrata as (select 
            address,
            concat(replace(action_date, ' ', 'T'), 'Z') as action_date,
            action_description,
            result,
            case_number,
            parcel_assess,
            owner,
            project_name,
            case when geom is null then null else
                  concat(
                  'location (',
                  ST_Y(ST_Centroid(geom)), 
                  ',', 
                  ST_X(ST_Centroid(geom)),
                  ')'
                  ) 
                  end as location
            from bseed.annual_inspections)

# Building Permits
- type: sql
  statements:
      - drop view if exists bseed.bldg_permits_socrata;
      - create view
            bseed.bldg_permits_socrata as
            ( select 
            permit_no,
            case when permit_issued is null then null else
                  concat(replace(permit_issued::text, ' ', 'T'), 'Z')
            end as permit_issued,
            case when permit_expire is null then null else
                  concat(replace(permit_expire::text, ' ', 'T'), 'Z')
            end as permit_expire,
            case when permit_completed is null then null else
                  concat(replace(permit_completed::text, ' ', 'T'), 'Z')
            end as permit_completed,
            permit_status,
            site_address,
            between1,
            parcel_no,
            lot_number,
            subdevision,
            case_type,
            case_description,
            legal_use,
            case estimated_cost when 'NaN' then null else estimated_cost end,
            case parcel_size when 'NaN' then null else parcel_size end,
            parcel_cluster_sector,
            case stories when 'NaN' then null else stories end,
            case parcel_floor_area when 'NaN' then null else parcel_floor_area end,
            case parcel_ground_area when 'NaN' then null else parcel_ground_area end,
            prc_aka_address,
            bld_permit_type,
            bld_permit_desc,
            fdicn_description,
            bld_type_use,
            residential,
            bld_type_const_cod,
            bld_zoning_dist,
            bld_use_group,
            bld_basement,
            fee_type,
            csm_caseno,
            csf_created_by,
            seq_no,
            case pcf_amt_due when 'NaN' then null else pcf_amt_due end,
            owner_last_name,
            owner_first_name,
            owner_address1,
            owner_address2,
            owner_city,
            owner_state,
            owner_zip,
            contractor_last_name,
            contractor_first_name,
            contractor_address1,
            contractor_address2,
            contractor_city,
            contractor_stat,
            contractor_zip
            from bseed.bldg_permits )
 
# Dismantle Permits
- type: sql
  statements:
      - create view 
            bseed.dismantle_permits_socrata as
            ( select
            concat_ws(ca.csa_id, '_', cm.prc_parcel_no) as unique_id,
            cm.prc_parcel_no,
            pn.cleaned as parcel_number,
            ca.street_address,
            ca.csm_caseno,
            ca.case_type,
            ca.action_description,
            case when ca.csa_date3 is null then null else
                  replace(to_char(ca.csa_date3::timestamp, 'YYYY-MM-DD HH24:MI:SS'), ' ', 'T')
            end as csa_date3,
            ca.csa_disp,
            ca.csa_notes,
            ca.actn_menu_id,
            ca.actn_code,
            case when ca.csa_creation_date is null then null else
                  replace(to_char(ca.csa_creation_date::timestamp, 'YYYY-MM-DD HH24:MI:SS'), ' ', 'T')
            end as csa_creation_date,
            case when ca.csa_date1 is null then null else
                  replace(to_char(ca.csa_date1::timestamp, 'YYYY-MM-DD HH24:MI:SS'), ' ', 'T')
            end as csa_date1,
            case when ca.csa_date2 is null then null else
                  replace(to_char(ca.csa_date2::timestamp, 'YYYY-MM-DD HH24:MI:SS'), ' ', 'T')
            end as csa_date2,
            case when ca.csa_updated is null then null else
                  replace(to_char(ca.csa_updated::timestap, 'YYYY-MM-DD HH24:MI:SS'), ' ', 'T')
            end as csa_updated,
            ca.csa_updated_by,
            ca.csa_assigned_to,
            ca.csa_done_by
            from bseed.tm_caseaction ca
            inner join bseed.tm_casemain cm on ca.csm_caseno = cm.csm_caseno
            inner join bseed.pnum_lookup pn on cm.prc_parcel_no = pn.dirty
            where ca.csa_date3 > Date '2014-01-01'
            and ca.action_description in ('Final Grade Inspection', 'Open Hole Inspection ', 'Winter Grade Inspection'))
