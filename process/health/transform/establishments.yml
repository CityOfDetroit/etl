- type: sql
  statements: 
  - create index if not exists estinfo_recordid_idx on health.estinfo using btree(recordid)
  - create index if not exists zip_recordid_idx on health.zipcode using btree(recordid)
  - create index if not exists etype_recordid_idx on health.etype using btree(recordid)
  - create index if not exists estatus_recordid_idx on health.estatus using btree(recordid)
  - create index if not exists riskcategory_recordid_idx on health.riskcategory using btree(recordid)
  - create index if not exists iheader_estid_idx on health.iheader using btree(establishmentid)
  - create index if not exists iheader_date_idx on health.iheader using btree(date)
  - create index if not exists iheader_inpsid_idx on health.iheader using btree(inspectionid)
  - create index if not exists instype_recordid_idx on health.instype using btree(recordid)
  - create index if not exists violate_recordid_idx on health.violate using btree(recordid)
  - create index if not exists idetail_inspid_idx on health.idetail using btree(inspectionid)
  - create index if not exists estinfo_license_idx on health.estinfo using btree(license)
  - create index if not exists estlic_licensenum_idx on health.estlic using btree(licensenumber)
  - create index if not exists mstrlist_recordid_idx on health.mstrlist using btree(recordid)
  - create index if not exists iitem_idetail_idx on health.iitem using btree(idetailid)
  - create index if not exists idetail_inspectionid_func_idx on health.idetail using btree(replace(inspectionid, '.0', ''))
  - create index if not exists iitem_idetail_func_idx on health.iitem using btree(replace(idetailid, '.0', ''))
  
- type: create_table
  table_name: establishments
  as: select 
        e.recordid,
        name,
        trim(trailing '.' from regexp_replace(address1, '\.','')) as address,
        (select rtrim(z.zipcode, '-0000') from health.zipcode z where z.recordid::text = replace(e.zip, '.0', '')) as zipcode,
        owner,
        license,
        case
          when lictype = 'SFE' then 'Fixed Establishment'
          when upper(lictype) = 'SMF' then 'Mobile Food Establishment'
          when lictype = 'SMC' then 'Mobile Food Commissary'
          when lictype = 'SST' then 'Special Transitory Food Unit'
          when lictype in ('SRF', 'Tes') then null
          else lictype
        end as license_type,
        (select l.date2 from health.estlic l where l.licensenumber = e.license order by l.year desc limit 1) as most_recent_license_date,
        (select t.description from health.etype t where t.recordid::text = replace(e.type, '.0', '')) as establishment_type,
        (select es.description from health.estatus es where es.recordid::text = replace(e.status, '.0', '')) as establishment_status,
        (select r.description from health.riskcategory r where r.recordid::text = (select substring(e.riskfactor, 1, 1))) as complexity,
        case 
          when e.reviewfrequency is null then '90.0'
          else (e.reviewfrequency::numeric + 30)::text
        end as reviewfrequency
      from health.estinfo e
      where lastinspection::timestamp >= '2016-08-01'
        and lictype != 'SVN'

- type: geocode
  table: health.establishments
  add_col: address
  geom_col: geom

- type: create_view
  view_name: establishments_socrata
  as: select
        recordid as establishmentid,
        name,
        address,
        zipcode,
        owner,
        license as license_number,
        license_type,
        (select makeSocrataDate(most_recent_license_date::timestamp)) as most_recent_license_date,
        establishment_type,
        initcap(establishment_status) as establishment_status,
        case
          when complexity = 'Z' then 'High'
          when complexity = 'Y' then 'Medium'
          when complexity = 'X' then 'Low'
          else null
        end as risk_category,
        reviewfrequency as review_frequency_days,
        (select makeSocrataLocation(geom)) as location
      from health.establishments
      order by name asc

- type: create_table
  table_name: establishments_gql
  as: select
        recordid::text as establishmentid,
        name,
        address,
        zipcode,
        owner,
        license as license_number,
        license_type,
        most_recent_license_date,
        establishment_type,
        initcap(establishment_status) as establishment_status,
        case
          when complexity = 'Z' then 'High'
          when complexity = 'Y' then 'Medium'
          when complexity = 'X' then 'Low'
          else null
        end as risk_category,
        reviewfrequency as review_frequency_days,
        geom
      from health.establishments
      order by name asc
