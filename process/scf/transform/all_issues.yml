- type: sql
  statements:
    # Add extra cols
    - alter table scf.issues_update add column if not exists canonical_issue_id float
    - update scf.issues_update set canonical_issue_id = 'NaN' where canonical_issue_id is null
    - alter table scf.issues_update add column if not exists days_to_close interval
    - update scf.issues_update set days_to_close = (closed_at::timestamp - created_at::timestamp) where closed_at != 'NaN'

    # Add geometry
    - select AddGeometryColumn('scf', 'issues_update', 'geom', 4326, 'POINT', 2)
    - create index etl_scf_update_geom_idx on scf.issues_update using gist(geom)
    - update scf.issues_update set geom = st_setsrid(st_makepoint(lng, lat), 4326) where lat is not null and lng is not null

    # Translate geom to 2898 to join to base
    - alter table scf.issues_update alter column geom type geometry(Point,2898) using st_transform(geom,2898)

    # Stamp with Neighborhood & Council District
    - alter table scf.issues_update add column neighborhood varchar(100)
    - update scf.issues_update r set neighborhood = n.name from base.neighborhoods n where st_contains(n.wkb_geometry, r.geom)
    - alter table scf.issues_update add column council_district integer
    - update scf.issues_update r set council_district = d.districts::integer from base.council_districts d where st_contains(d.wkb_geometry, r.geom)

    # Insert updates into master table
    - delete from scf.issues where id in (select id from scf.issues_update)
    - insert into scf.issues 
        (acknowledged_at,
        address,
        closed_at,
        created_at,
        description,
        id,
        lat,
        lng,
        priority_code,
        reopened_at,
        report_method,
        request_type_title,
        status,
        updated_at,
        canonical_issue_id,
        days_to_close,
        neighborhood,
        council_district )
        select
        acknowledged_at,
        address,
        closed_at,
        created_at,
        description,
        id,
        lat,
        lng,
        priority_code,
        reopened_at,
        report_method,
        request_type_title,
        status,
        updated_at,
        canonical_issue_id,
        days_to_close,
        neighborhood,
        council_district
        from scf.issues_update

# Make views
- type: create_view
  view_name: issues_socrata
  as: select 
        id,
        status,
        request_type_title,
        case 
          when description = 'NaN'
          then null
          else description
        end as description,
        case
          when id is null
          then null
          else concat('https://seeclickfix.com/issues/', id)
        end as web_url,
        report_method,
        priority_code,
        case
          when created_at = 'NaN'
          then null
          else (select makeSocrataDate(created_at::timestamp))
        end as created_at,
        case
          when acknowledged_at = 'NaN'
          then null 
          else (select makeSocrataDate(acknowledged_at::timestamp))
        end as acknowledged_at,
        case
          when closed_at = 'NaN'
          then null
          else (select makeSocrataDate(closed_at::timestamp))
        end as closed_at,
        case
          when reopened_at = 'NaN'
          then null 
          else (select makeSocrataDate(reopened_at::timestamp))
        end as reopened_at,
        case
          when updated_at = 'NaN'
          then null
          else (select makeSocrataDate(updated_at::timestamp))
        end as updated_at,
        case
          when days_to_close is null
          then null
          else (extract(epoch FROM days_to_close)/86400)::double precision
        end as days_to_close,
        (select handleNan(canonical_issue_id)) as canonical_issue_id,
        address,
        neighborhood,
        council_district,
        case when lat is null then null else
          concat(
            'location (',
            lat,
            ',',
            lng,
            ')'
          )
        end as location
      from scf.issues
      where request_type_title not in ('Abandoned Vehicle', 'Illegal Dumping In Progress', 'Squatters Issue')

- type: create_view
  view_name: issues_socrata_redact_test
  as: select
        id,
        status,
        request_type_title,
        case 
          when description = 'NaN' then null
          when request_type_title in ('Abandoned Vehicle', 'Illegal Dumping In Progress', 'Squatters Issue') then 'Redacted'
          else description
        end as description,
        case
          when id is null
          then null
          else concat('https://seeclickfix.com/issues/', id)
        end as web_url,
        report_method,
        priority_code,
        case
          when created_at = 'NaN'
          then null
          else (select makeSocrataDate(created_at::timestamp))
        end as created_at,
        case
          when acknowledged_at = 'NaN'
          then null 
          else (select makeSocrataDate(acknowledged_at::timestamp))
        end as acknowledged_at,
        case
          when closed_at = 'NaN'
          then null
          else (select makeSocrataDate(closed_at::timestamp))
        end as closed_at,
        case
          when reopened_at = 'NaN'
          then null 
          else (select makeSocrataDate(reopened_at::timestamp))
        end as reopened_at,
        case
          when updated_at = 'NaN'
          then null
          else (select makeSocrataDate(updated_at::timestamp))
        end as updated_at,
        case
          when days_to_close is null
          then null
          else (extract(epoch FROM days_to_close)/86400)::double precision
        end as days_to_close,
        (select handleNan(canonical_issue_id)) as canonical_issue_id,
        case 
          when request_type_title in ('Abandoned Vehicle', 'Illegal Dumping In Progress', 'Squatters Issue') then 'Redacted'
          else address
        end as address,
        neighborhood,
        council_district,
        case 
          when lat is null or request_type_title in ('Abandoned Vehicle', 'Illegal Dumping In Progress', 'Squatters Issue') then null
          else
            concat(
              'location (',
              lat,
              ',',
              lng,
              ')'
            )
        end as location
      from scf.issues

- type: create_view
  view_name: issues_socrata_private
  as: select
        id,
        status,
        request_type_title,
        case 
          when description = 'NaN'
          then null
          else description
        end as description,
        case
          when id is null
          then null
          else concat('https://seeclickfix.com/issues/', id)
        end as web_url,
        report_method,
        priority_code,
        case
          when created_at = 'NaN'
          then null
          else (select makeSocrataDate(created_at::timestamp))
        end as created_at,
        case
          when acknowledged_at = 'NaN'
          then null 
          else (select makeSocrataDate(acknowledged_at::timestamp))
        end as acknowledged_at,
        case
          when closed_at = 'NaN'
          then null
          else (select makeSocrataDate(closed_at::timestamp))
        end as closed_at,
        case
          when reopened_at = 'NaN'
          then null 
          else (select makeSocrataDate(reopened_at::timestamp))
        end as reopened_at,
        case
          when updated_at = 'NaN'
          then null
          else (select makeSocrataDate(updated_at::timestamp))
        end as updated_at,
        case
          when days_to_close is null
          then null
          else (extract(epoch FROM days_to_close)/86400)::double precision
        end as days_to_close,
        (select handleNan(canonical_issue_id)) as canonical_issue_id,
        address,
        neighborhood,
        council_district,
        case when lat is null then null else
          concat(
            'location (',
            lat,
            ',',
            lng,
            ')'
          )
        end as location
      from scf.issues

- type: sql
  statements:
    - drop table if exists scf.issues_update cascade

# Copy view to a csv
# - type: sql
#   statements:
#     - copy ( select * from scf.issues_socrata_private ) to '/tmp/311.csv' delimiter ',' csv header
